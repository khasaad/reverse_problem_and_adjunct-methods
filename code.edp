//verbosity 0;

border Gamma1(t=0,1) {x=t; y=0;label=1;};
border Gamma2(t=0,1) {x=1; y=t;label=2;};
border Gamma3(t=0,1) {x=(1-t); y=1;label=3;};
border Gamma4(t=0,1) {x=0; y=1-t;label=4;};
border Gammai(t=0,2*pi){x=0.75+0.075*cos(t);y=0.25+0.075*sin(t);label=5;};

border Gammaj(t=0,2*pi){x=0.25+0.075*cos(t);y=0.5+0.075*sin(t);label=6;};

int n=10;

mesh Th = buildmesh(Gamma1(n)+Gamma2(n)+Gamma3(n)+Gamma4(n)+Gammai(n));
mesh Rh = buildmesh(Gamma1(n)+Gamma2(n)+Gamma3(n)+Gamma4(n)+Gammaj(n));
mesh Sh = buildmesh(Gamma1(n)+Gamma2(n)+Gamma3(n)+Gamma4(n));



fespace VVh(Th, P2);

fespace WWh(Rh, P2);

fespace XXh(Sh, P2);

VVh u, v;

WWh uh, vh;

XXh ut;

plot(Th, wait=1);

macro grad(u) [ dx(u), dy(u) ] //EOM

solve omega(u, v) = int2d(Th)(grad(u)'*grad(v))
					+ int1d(Th,3)(dy(u)*v)
					- int1d(Th, 1) (dy(u)*v)
					+ on(4, u = 0)
					+ on(2, u = 1)
					+ on(5, u = 0);


func wg = -dx(u);
func wd = dx(u);
cout << "wg = " << wg << endl;
cout << "wd = " << wd << endl;

plot(u, wait=1);

ut = u+wg+wd;

// plot(ut, wait=1);



// ut =

// func real f (WWh var){
    // return x^2 + y^2 + var^2;
// }

//
solve omegainit(uh, vh) = int2d(Rh)(grad(uh)'*grad(vh))
					+ int1d(Rh,3)(dy(uh)*vh)
					- int1d(Rh, 1) (dy(uh)*vh)
					+ on(4, uh = 0)
					+ on(2, uh = 1)
					+ on(6, uh = 0);


plot(uh, wait=1);

int k=1;

while(k<20000){

ut = uh -0.3 *(int1d(Rh, 4)( dy(uh)*dy(vh) ) + int1d(Rh, 1)( dy(uh)*dy(vh) ) - int1d(Rh, 4)( -dy(vh)*wg ) - int1d(Rh, 1)( dy(vh)*wd ));

uh = ut;

plot(uh, wait=1, cmm=k);

k = k+1;
// cout<< "tour"<<endl;
}

// plot(ut, wait=1);
